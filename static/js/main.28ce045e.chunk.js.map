{"version":3,"sources":["components/queries.js","components/SeenCards.jsx","components/Card.jsx","components/Button.jsx","App.js","index.js"],"names":["GET_RANDOM_CHARACTER","gql","_templateObject","SeenCards","_ref","seen","onClick","characters","Object","toConsumableArray","values","react_default","a","createElement","className","style","maxHeight","overflowY","map","c","key","id","Math","random","cursor","src","image","alt","name","Card","props","character","objectSpread","maxWidth","keys","Button","client","type","App","state","Map","current","handleCardUpdate","_callee","randId","_current","_ref2","regenerator_default","wrap","_context","prev","next","_this","trunc","has","get","abrupt","setState","query","variables","sent","data","set","toString","stop","handleCardSelect","_this2","this","_this$state","react_apollo_esm","role","aria-label","components_SeenCards","length","components_Card","components_Button","Component","ApolloClient","uri","cache","InMemoryCache","addTypename","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.28ce045e.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\nconst GET_RANDOM_CHARACTER = gql`\n  query randomCharacter($randId: ID) {\n    character(id: $randId) {\n      id\n      name\n      status\n      species\n      gender\n      origin {\n        name\n      }\n      location {\n        name\n      }\n      image\n    }\n  }\n`;\n\nexport { GET_RANDOM_CHARACTER };\n","import React from \"react\";\n\nconst SeenCards = ({ seen, onClick }) => {\n  const characters = [...seen.values()];\n  return (\n    <ul\n      className='list-group'\n      style={{ maxHeight: \"300px\", overflowY: \"scroll\" }}\n    >\n      {characters.map(c => (\n        <li\n          key={c.id + Math.random()}\n          className='list-group-item d-flex justify-content-between align-items-center'\n          style={{ maxHeight: \"40px\", cursor: \"pointer\" }}\n          onClick={() => onClick(c.id)}\n        >\n          <img src={c.image} alt='img' style={{ maxHeight: \"40px\" }} />\n          {c.name}\n          <span className='badge badge-info badge-pill'>{c.id}</span>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default SeenCards;\n","import React from \"react\";\n\nconst Card = props => {\n  const character = { ...props.character };\n\n  return (\n    <div className='card mb-3'>\n      <div className='row no-gutters'>\n        <div className='col-md-5'>\n          <img\n            style={{ maxHeight: \"300px\", maxWidth: \"300px\" }}\n            src={character && character.image}\n            className='card-img'\n            alt='loading...'\n          />\n        </div>\n        <div className='col-md-7 p-3'>\n          <h5 className='card-title d-flex justify-content-between mb-0'>\n            <u>{character && character.name}</u>\n            <span className='badge badge-pill badge-info'>{character.id}</span>\n          </h5>\n          {delete character.image &&\n            delete character.name &&\n            delete character.id}\n          <div\n            className='card-body'\n            style={{ maxHeight: \"200px\", overflowY: \"scroll\" }}\n          >\n            <div className='card-text'>\n              <ul className='list-group list-group-flush'>\n                {character &&\n                  Object.keys(character).map(key => (\n                    <li key={key} className='list-group-item'>\n                      {key}: {character[key].name || character[key]}\n                    </li>\n                  ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nconst Button = ({ onClick, client }) => {\n  return (\n    <button\n      onClick={() => onClick(client)}\n      type='button'\n      className='btn btn-info'\n    >\n      NEW CHARACTER\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport { GET_RANDOM_CHARACTER } from \"./components/queries\";\nimport SeenCards from \"./components/SeenCards\";\nimport Card from \"./components/Card\";\nimport Button from \"./components/Button\";\nimport { ApolloConsumer } from \"react-apollo\";\n\nclass App extends Component {\n  state = {\n    seen: new Map(),\n    current: {}\n  };\n\n  render() {\n    const { current, seen } = this.state;\n    return (\n      <ApolloConsumer>\n        {client => (\n          <div className='App'>\n            <div className='container'>\n              <div className='row'>\n                <div className='col-5'>\n                  <h6>\n                    Have you seen them all?{\" \"}\n                    <span role='img' aria-label='eyes'>\n                      ðŸ‘€\n                    </span>\n                  </h6>\n                  <SeenCards seen={seen} onClick={this.handleCardSelect} />\n                </div>\n                <div className='col-7'>\n                  {Object.keys(current).length > 0 && (\n                    <Card character={current || {}} />\n                  )}\n                  <Button onClick={this.handleCardUpdate} client={client} />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </ApolloConsumer>\n    );\n  }\n\n  handleCardUpdate = async client => {\n    const seen = new Map(this.state.seen);\n    const randId = Math.trunc(Math.random() * (400 - 1) + 1);\n\n    if (seen.has(randId)) {\n      const current = seen.get(randId);\n      //If info has been already requested, there's no need to query again\n      return this.setState({ current }); // card was already fetched\n    }\n\n    const {\n      data: { character: current }\n    } = await client.query({\n      query: GET_RANDOM_CHARACTER,\n      variables: { randId }\n    });\n\n    seen.set(randId.toString(), current); //add to map\n    return this.setState({ seen, current });\n  };\n\n  handleCardSelect = id => {\n    const { seen } = this.state;\n    const current = { ...seen.get(id.toString()) };\n\n    return this.setState({ current });\n  };\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\",\n  cache: new InMemoryCache({\n    addTypename: false\n  })\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}